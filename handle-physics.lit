@title Handling game physics
@overwrite_css style.css
@comment_type ; %s

@s Ball physics

Well, I'll try. The ball will be moving at a single speed value, so I'll have the game try to determine the ball's next direction and then apply that "vector" to the ball. It's similar to how the input handling works, really.

--- Handle ball physics
	call DetermineBallDirection
	call ApplyBallMovement
---

--- Helper functions +=
DetermineBallDirection::
@{Determine ball's next movement}
	ret

ApplyBallMovement::
@{Apply ball movement}
	ret
---

I'll want to keep track of the ball's direction. Uses three bits: one for the horizontal direction, another for the vertical, and an extra one just because I wanted the ball to start serving straight in the direction of the paddles.

--- WRAM definitions +=
;;--
;; bit 0: left (0) / right (1)
;; bit 1: up (0) / down (1)
;; bit 2: no vertical momentum (0) / vertical momentum (1)
;;--
wBallNextDirection:: db
---

And the matching flag constants.

--- Constants +=
; wBallNextDirection bits
F_HORIZONTAL equ 0
F_VERTICAL   equ 1
F_APPLY_VERTICAL equ 2
---

I'll first write up the game applying the determined direction, since that's the easier bit.

--- Apply ball movement
@{Apply horizontal movement}

.apply_ball_y
@{Apply vertical movement}

.finished_applying
---

Determining the direction itself is a bit more involved, since that's basically the collision checking routine. Instead of checking if the ball is touching another sprite, I want to use hard ranges.

The ball will bounce in both the X and Y directions when it hits a paddle, but only in the Y direction when it hits a wall.

--- Determine ball's next movement
@{Determine if the ball collides with anything}

.switch_directions
@{Switch ball directions}
	jr .skip_collision

.switch_only_y_direction
@{Switch ball directions but only the Y axis}

.skip_collision
---

@s Apply horizontal movement

First, let's deal with how the ball moves horizontally.

--- Apply horizontal movement
@{Determine the ball's new horizontal direction}

.move_ball_right
@{Move the ball to the right}
	jr .apply_ball_y

.move_ball_left
@{Move the ball to the left}
	; jr .apply_ball_y
---

I get the next ball's next direction and store it in B, because I'll change A a bunch in the following sections. That way I can reuse the original value should A be changed.

--- Determine the ball's new horizontal direction
	ld a, [wBallNextDirection]
; store next direction in b
	ld b, a
; load horizontal position
	ld hl, wBallX
	bit F_HORIZONTAL, b
	jr z, .move_ball_left
---

I pointed HL to `wBallX` and simply incremented and decremented it directly.

--- Move the ball to the right
	inc [hl]
---

--- Move the ball to the left
	dec [hl]
---

@s Apply vertical movement

Next up is the ball's vertical movement. This is similar to the previous section.

--- Apply vertical movement
@{Determine the ball's new vertical direction}

.move_ball_down
@{Move the ball down}
	jr .finished_applying

.move_ball_up
@{Move the ball up}
	; jr .finished_applying
---

Since there's a flag to apply the vertical movement, I'll check for that as well. If that's not set, it skips processing the vertical movement.

--- Determine the ball's new vertical direction
	ld hl, wBallY
	bit F_APPLY_VERTICAL, b
	jr z, .finished_applying
	bit F_VERTICAL, b
	jr z, .move_ball_up
---

--- Move the ball down
	inc [hl]
---

--- Move the ball up
	dec [hl]
---

@s Collision checking

Well, time for the collision check. I'll first check if the ball hits any of the paddles' X coordinates, and if so, jumps to the paddle collision check portion. I'll also check if the ball collides with the top and bottom of the arena.

The paddle collision routines are its own little thing here, since the line before it is basically another early return.

--- Determine if the ball collides with anything
@{Check if the ball hits the paddles' X coordinates}
@{Check if the ball is colliding with the top and bottom of the arena}
	jr .skip_collision

.check_left_colliding
@{Check if the ball is touching the left paddle}

.check_right_colliding
@{Check if the ball is touching the right paddle}
---

@s Checking if the ball is in the range of the paddles

<figure>
<img src="../figures/collide1.svg">
</figure>

First I'll check if it's in or beyond the line of the left paddle. I'll add the paddle's width to the offset because the line to be checked is to the right of the paddle.

I'll also check if the ball is to the right of where the left paddle begins, that way the ball won't collide with the space at the back of the paddle.

--- Check if the ball hits the paddles' X coordinates
	ld a, [wBallX]
	cp LEFT_PADDLE_X + PADDLE_WIDTH
	
; [wBallX] <= (LEFT_PADDLE_X + PADDLE_WIDTH)
	jr c, .additional_left_check
	jr z, .additional_left_check
	
	jr .left_x_done

.additional_left_check
	cp LEFT_PADDLE_X
; [wBallX] >= (LEFT_PADDLE_X)
	jr nc, .check_left_colliding

.left_x_done
---

Then I'll check if it's in or beyond the line of the right paddle. In this case, the line is to the left of the paddle. Likewise with making sure it doesn't collide with blank space.

--- Check if the ball hits the paddles' X coordinates +=
	cp RIGHT_PADDLE_X - PADDLE_WIDTH
	
; [wBallX] >= (RIGHT_PADDLE_X - PADDLE_WIDTH)
	jr nc, .additional_right_check
	
	jr .right_x_done

.additional_right_check
	cp RIGHT_PADDLE_X + PADDLE_WIDTH
	jr c, .check_right_colliding

.right_x_done
---

The paddle's graphics are 1 tile wide, and 1 tile is 8 pixels wide. So:

--- Constants +=
PADDLE_WIDTH equ 8 ; pixels
---

@s Simple paddle collision

<figure>
<img src="../figures/collide2.svg">
</figure>

Now, I've checked that the ball is in the paddle's *horizontal* range. Let's say it passes. I'll now have to check the *vertical* range, because the paddles aren't of infinite height <s>unlike some games I can mention</s>.

I want this to collide when (`wLeftPaddleY` &leq; `wBallY` &leq; `wLeftPaddleY + PADDLE_HEIGHT`).

That is, to say: ((`wLeftPaddleY` &leq; `wBallY`) AND (`wBallY` &leq; `wLeftPaddleY + PADDLE_HEIGHT`)).

But checking this way would be tricky, so I can invert this to make the ball *pass through* when: ((`wBallY` &lt; `wLeftPaddleY`) OR (`wBallY` &gt; `wLeftPaddleY + PADDLE_HEIGHT`)).

--- Check if the ball is touching the left paddle
	ld hl, wLeftPaddleY
	ld a, [wBallY]
	cp [hl]
; pass if wBallY < wLeftPaddleY
	jr c, .skip_collision

	sub a, PADDLE_HEIGHT
	cp [hl]
; collide if wBallY-PADDLE_HEIGHT = wLeftPaddleY
	jr z, .switch_directions
; pass if wBallY-PADDLE_HEIGHT > wLeftPaddleY
	jr nc, .skip_collision
	jr .switch_directions
---

I wanted to reuse the value of `wBallY` somehow, so I expressed that right half as (`wBallY-PADDLE_HEIGHT` &gt; `wLeftPaddleY`).

While I'm at it, I'll define the paddle height here, too. The paddle is 5 tiles tall, so 8 &times; 5 = 40 pixels...

--- Constants +=
PADDLE_HEIGHT equ 40 ; pixels
---

@s Paddle collision with directional awareness

That simple approach creates a bit of a problem where the direction will just be inverted no matter where the ball collided with the paddle. For example, the ball can bounce down even when it collided with the top of the paddle. Probably not what you'll expect of a standard Pong game.

I'll want to store how far the ball is from the top of the paddle. That way, the ball will bounce down only when it hits the bottom half of the paddle. Otherwise, it bounces up.

--- WRAM definitions +=
wDeltaYFromPaddle:: db
---

Then I'll need to rework the previous logic to reflect this. I changed the first `cp [hl]` to `sub [hl]` to get the distance between the top of the paddle and the ball.

There's also no need to check against [HL] again, since I'm working off of the calculated distance value.

--- Check if the ball is touching the left paddle :=
	ld hl, wLeftPaddleY
	ld a, [wBallY]
	sub [hl]
; pass if wBallY < wLeftPaddleY
	jr c, .skip_collision

; pass if wBallY-wLeftPaddleY > PADDLE_HEIGHT
	cp PADDLE_HEIGHT
	jr z, .save_delta_and_collide_left
	jr nc, .skip_collision

.save_delta_and_collide_left
	ld [wDeltaYFromPaddle], a
	jr .switch_directions
---

@s Right paddle collision

Now that I've got the left paddle collision worked out, it's a matter of applying the same thing to the right paddle. This is only processed when the ball hits the X position of the right paddle, so `wDeltaYFromPaddle` should still be correct here.

--- Check if the ball is touching the right paddle
	ld hl, wRightPaddleY
	ld a, [wBallY]
	sub [hl]
	jr c, .skip_collision
	cp PADDLE_HEIGHT
	jr z, .save_delta_and_collide_right
	jr nc, .skip_collision
.save_delta_and_collide_right
	ld [wDeltaYFromPaddle], a
	jr .switch_directions
---

@s Switching directions

<figure>
<img src="../figures/collide3.svg">
</figure>

Once a collision is detected, I can switch the ball's direction with respect to the delta Y position previously calculated. At this point, A = `wDeltaYFromPaddle`, so I don't need to load it again.

--- Switch ball directions
	cp PADDLE_HEIGHT/2
	ld a, [wBallNextDirection]
; bounce down if delta Y > (PADDLE_HEIGHT/2)
	jr nc, .down
; up
	xor a, 1 << F_HORIZONTAL  ; invert the horizontal direction
	res F_VERTICAL, a         ; move up
	jr .set_direction
.down
	xor a, 1 << F_HORIZONTAL  ; invert the horizontal direction
	set F_VERTICAL, a         ; move down
.set_direction
	set F_APPLY_VERTICAL, a   ; always set the vertical apply flag
	ld [wBallNextDirection], a
---

The `xor a, 1 << F_HORIZONTAL` instruction couldn't be placed right after `wBallNextDirection` was retrieved, since I'd lose the result of the `cp PADDLE_HEIGHT/2` instruction. So, that one is duplicated across branches.

@s Colliding with the bounds of the arena

<figure>
<img src="../figures/collide4.svg">
</figure>

Fortunately, this is a really simple check.

--- Check if the ball is colliding with the top and bottom of the arena
	ld a, [wBallY]
	cp BALL_UPPER_BOUNDARY
; wBallY < BALL_UPPER_BOUNDARY
	jr c, .switch_only_y_direction
	cp BALL_LOWER_BOUNDARY
; wBallY > BALL_LOWER_BOUNDARY
	jr z, .skip_collision
	jr nc, .switch_only_y_direction
---

Set the boundaries...

--- Constants +=
BALL_UPPER_BOUNDARY equ PADDLES_UPPER_BOUNDARY - 8
BALL_LOWER_BOUNDARY equ PADDLES_LOWER_BOUNDARY + (5*8)
---

...And flip the verticality.

--- Switch ball directions but only the Y axis
	ld a, [wBallNextDirection]
	xor a, 1 << F_VERTICAL
	set F_APPLY_VERTICAL, a
	ld [wBallNextDirection], a
---
