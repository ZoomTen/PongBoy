@title Initializing the graphics
@overwrite_css style.css
@comment_type ; %s

@s Set up the game graphics

Next up, I'll copy the graphics to VRAM, starting with the actual tiles, and then setting up the background.

--- Set up the game graphics
@{Copy over the main tileset}
@{Copy over the score numeral tileset}
@{Copy over the background tile map}
---

@s Load main tileset

The main tileset in use is, well, plain Pong graphics. For this game I'm going with a sort of 3D type look. These graphics will be used for the objects as well as the background.

<figure>
<img class="pixelated" alt="Game graphics" src="../src/gfx/game.png">
<figcaption>Game graphics</figcaption>
</figure>

I'll include the data here. The .2bpp file will be automatically generated from the .png file when built.

--- Miscellaneous data
PongGFX::
	incbin "gfx/game.2bpp"
PongGFX_END::
---

(Also notice the use of `incbin` instead of `include`. As it says, it inserts a binary file straight into the ROM, instead of trying to compile the file as source code&mdash;which is what `include` does.)

And then load it into VRAM&mdash;specifically, the first tileset slot&mdash;with the [CopyMem16](helpers.html#6:5) helper function. At this point, the screen is still off, so I'm safe to do it like a regular memory copy.

--- Copy over the main tileset
	ld hl, vChars0
	ld de, PongGFX
	ld bc, PongGFX_END - PongGFX
	call CopyMem16
---

@s Loading numerals

Then, these numerals, which will be used for the score display. They're 8x16 blocks with the upper half stored first and then the lower half. They'll be used to print the score to the background.

<figure>
<img class="pixelated" alt="Score numerals" src="../src/gfx/numbers.png">
<figcaption>Score numerals</figcaption>
</figure>

I'll include it just like the Pong graphics:

--- Miscellaneous data +=
NumbersGFX::
	incbin "gfx/numbers.2bpp"
NumbersGFX_END::
---

And then load them up similarly, only such that it starts at tile \$10.

--- Copy over the score numeral tileset
	ld hl, vChars0 + $100
	ld de, NumbersGFX
	ld bc, NumbersGFX_END - NumbersGFX
	call CopyMem16
---

There's a little compiler trick i can use here. Instead of `\$100`, I can just say how many tiles to offset it with. To do that, I first define this:

--- Constants +=
tiles equs "* $10"
---

What this does is make it so that the statement `6 tiles` in the code turns into `6 * \$10`. The `\$10` is how big one tile's worth of graphics are in VRAM.

So now, I can write this instead:

--- Copy over the score numeral tileset :=
	ld hl, vChars0 + $10 tiles
	ld de, NumbersGFX
	ld bc, NumbersGFX_END - NumbersGFX
	call CopyMem16
---

@s Load the background

The background will use the main tileset, so I'll incbin the tile map.

--- Miscellaneous data +=
BackgroundMAP::
	incbin "gfx/background.map"
BackgroundMAP_END::
---

I'm not doing anything fancy (or optimized) here, it's just a straight-up copy to the first background map slot.

--- Copy over the background tile map
	ld hl, vBGMap0
	ld de, BackgroundMAP
	ld bc, BackgroundMAP_END - BackgroundMAP
	call CopyMem16
---

@s A look at VRAM

After this is done, here's what the tileset in VRAM will look like:

<figure>
<img src="../figures/vram1.svg">
</figure>

The Pong graphics start at tile `\$00` through `\$09`, while the numerals start at `\$10`, being split as the upper half (`\$10`&ndash;`$19`) and the lower half (`\$1A`&ndash;`\$22`)
