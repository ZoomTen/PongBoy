@title VBlank
@overwrite_css style.css
@comment_type ; %s

@s Writing the VBlank interrupt

The vertical blank (VBlank) is a period of time where the Game Boy stops rendering the screen, because the [scanline number set to be rendered](https://gbdev.io/pandocs/STAT.html#ff44--ly-lcd-y-coordinate-read-only) exceeds the height of the screen (144 lines). As execution goes on, the scanline number will keep incrementing until it reaches 153, after which loops back to zero, when the Game Boy will render the first scanline again.

<figure>
<img src="../figures/vblank.svg">
</figure>

Since the Game Boy isn't rendering the screen at this point, it's one of the safest places to do whatever I want relating to the screen&mdash;say, loading graphics or changing the background data. But as you can probably see, the catch is that there's not a whole lot of time available, so it's best not to stuff it with *everything*. In any case, I'll reserve it for now:

--- VBlank interrupt routine
VBlank::
@{Save registers state}
@{Contents of VBlank}
@{Reload registers state}
	reti
---

Because this is an interrupt routine, it can be triggered in the middle of program execution. To ensure the program can continue without unintended effects, I'll save the state of the current 16-bit register pairs to the Game Boy's stack through a few `push` instructions:

--- Save registers state
	push af
	push bc
	push de
	push hl
---

<figure>
<img src="../figures/stack.svg">
</figure>

At the end of the routine, I'll have to reload them by `pop`ping them back in. Because it's a first-in-last-out stack, the registers need to be reloaded in **reverse** order.

--- Reload registers state
	pop hl
	pop de
	pop bc
	pop af
----

If the same ordering is used as the one to save registers, then HL would end up in AF, DE would end up in BC, etc.

(I should point out at this point that F isn't an actual register&mdash;it's just paired with A for the `push af` instruction.)

I'll add this in the "helper functions" slot, I guess.

--- Helper functions +=
@{VBlank interrupt routine}
---

@s Setting the vector to my routine

All that's needed is just a jump instruction to make the Game Boy execute the routine when VBlank is reached:

--- VBlank interrupt vector :=
jp VBlank
---
