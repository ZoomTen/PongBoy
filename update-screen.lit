@title Updating the screen
@overwrite_css style.css
@comment_type ; %s


@s Stepping one frame at a time

The first thing I'll do in the game's main loop is to make sure that the logic is run once per frame. This `halt` instruction will wait until an interrupt is encountered, and then it'll resume executing. Since I have VBlank enabled at this point, this is an advantage. Using `halt` over waiting for VBlank myself saves battery since the Game Boy doesn't have to keep checking all the time if VBlank is reached or not.

The downside however, is that there's a [hardware bug](https://gbdev.io/pandocs/halt.html#halt-bug) which sometimes causes the instruction after `halt` to be executed twice. I'll place a `nop` below just to be safe, so that if it happens the Game Boy will do nothing (twice).

--- Wait one frame
	halt
	nop
---

But since `halt` waits for *any* interrupt, it might be a good idea at this point to specifically ask for VBlank, in case I add any more interrupt handlers. I'll do this by having a flag that will be acknowledged when the VBlank interrupt is encountered.

--- HRAM definitions +=
hAskVBlank:: db
---

It's acknowledged by zeroing it out:

--- Contents of VBlank +=
	xor a
	ldh [hAskVBlank], a
---

Now I'll create a function that specifically waits for VBlank. It sets `hAskVBlank` and checks if it has been acknowledged.

--- DelayFrame
DelayFrame::
	ld a, 1
	ldh [hAskVBlank], a
.loop
	halt
	nop
	ldh a, [hAskVBlank]
	and a
	ret z  ; exit if vblank is acknowledged
	jr .loop
---
--- Helper functions +=
@{DelayFrame}
---

And then I'll replace this frame-waiting code with a single call to the new function:

--- Wait one frame :=
	call DelayFrame
---

@s Updating the sprites

Sprite updating is done from within the game logic. I'll just reuse the [sprite setup routines](initialization-4.html#8.3:3) from earlier, since it's easier for me to just reinitialize the sprites rather than manually changing their positions one by one.

--- Update screen
@{Update sprite positions}
---

--- Update sprite positions
	call SetupLeftPaddle
	call SetupRightPaddle
	call SetupBall
---

@s Updating the score display

I *could* try to make this update *within* the main loop, because it is possible to update VRAM outside of VBlank. However that requires a wait until the VRAM is writable for each operation, and that may be a bit risky. So, I want to just do it in VBlank instead.

--- Contents of VBlank +=
@{Update the score display}
---

I'll throw in some more constants to set the starting point of the scores within the tilemap.

--- Constants +=
LEFT_SCORE_VRAM_START equ $9846
RIGHT_SCORE_VRAM_START equ $984C
---

`ShowScore` is going to just use A and HL for the input.

--- Update the score display
	ld a, [wLeftScore]
	ld hl, LEFT_SCORE_VRAM_START
	call ShowScore
	
	ld a, [wRightScore]
	ld hl, RIGHT_SCORE_VRAM_START
	call ShowScore
---

And `ShowScore` is defined... here:

--- ShowScore
;;--
;; 
;; @param A     score value, BCD
;; @param HL    where in VRAM to place it in
;; 
;; @clobber BC  the split score value
;; @clobber DE  $20 - 1
;;--
ShowScore::
@{Split score into two numbers}
@{Print top half of the score}
@{Print bottom half of the score}
	ret
---
--- Helper functions +=
@{ShowScore}
---

I'm going to assume that the scoring system operates on [binary-coded decimal](https://en.wikipedia.org/wiki/Binary-coded_decimal) (BCD). Practically speaking, it just means that the two halves of the score's *hexadecimal representation* never go past 9, so no `A`, `B`, `C`, `D`, `E`, or `F`. Sure, the number won't accurately represent the score as *data*, but in the interest of making an "easy" implementation, it'll do.

First I'll split the number into two parts, and then add them to the [starting tile of the numeral "0"](initialization-3.html#8.2:5) in the tileset.

--- Split score into two numbers
	ld b, a  ; save original number

; get the lower half and put it into C
	and %00001111
	add $10 ; starting tile of numeral "0"
	ld c, a

; get the upper half and put it into B
	ld a, b
	and %11110000
	swap a  ; make it the lower half
	add $10 ; starting tile of numeral "0"
	ld b, a
---

The score's "tens" position is now in B, while the "ones" are in C. All that's left to do is to put them in memory.

--- Print top half of the score
	ld [hl], b
	inc hl
	ld [hl], c
---

I'll have to move the cursor down, then write the lower half. I'll add to BC by `\$10`, since the lower half of the numbers in the tile set comes right after the upper half.

--- Print bottom half of the score
; move VRAM position
	ld de, $20 - 1
	add hl, de

; I assume the lower half comes directly
; after the upper half, so add the offset
; to b and c
	ld a, 10
	add b
	ld b, a
	ld a, 10
	add c
	ld c, a

; put it to the screen
	ld [hl], b
	inc hl
	ld [hl], c
---
