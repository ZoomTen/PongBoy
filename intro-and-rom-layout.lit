@title Introduction and Source Layout
@overwrite_css style.css
@comment_type ; %s

@s Some prerequisites

In order to build this game, I assume you have the following (A Unix-like shell is preferred):

* [GNU Make](https://www.gnu.org/software/make/)
* [ASMotor](https://github.com/asmotor/asmotor)
* [SuperFamiConv](https://github.com/Optiroc/SuperFamiconv)

All of those should be accessible from your terminal, they are required to build the source code that's being explained here.

The source code (and ROM) can be obtained as a [zip file](pong-src.zip), for convenience.

@s Source code layout

My source code layout is quite minimal for this tutorial (`./` is the source directory):

* `./pong.asm` - All the game logic resides in this file.
* `./include/*` - Anything that can be included from `pong.asm`.
* `./gfx/*` - Graphics data, including generated files.
* No dedicated object file folder or generated ROM folder is considered for now.

For the exact steps being taken to build the ROM, see [the Makefile](makefile.html).

@s Assumptions

Since these are what the assembler uses:
- Hexadecimal numbers are prefixed with `\$`, e.g. `$7f`.
- Binary numbers are prefixed with `%`, e.g. `%1010`.

The terms "game" and "program" will probably be used interchangeably. Likewise between the terms "function", "routine", and "subroutine".

"Sections" are used to organize the program. The linker uses these as a guide to place code and data. I can use this to specify manually that a piece of code should reside in a specific bank (or a location), but for this write-up I decided to place everything in bank 0, also known as the home bank (because it's always accessible by the Game Boy).

I'll refer registers (8-bit and 16-bit) in uppercase, e.g. A, B, C, HL, DE, etc.

--- Example
; place everything below the section line at bank 0 ("home").
	section "code", HOME
---

Labels are suffixed with `::` so that they may be exported automatically. It's probably a quirk of the assembler, but unless labels are exported, I find that they won't appear in the .map file (which is readable as a .sym file by emulators like BGB and Emulicious, useful for debugging).

The syntax highlighting in this write-up won't be helpful, and I don't feel like hacking the script further to include a syntax highlighter for Game Boy ASM... colors are pretty though.

@s Main Pong code

Now I'll start writing `pong.asm`. First, I'll want to define the constants, macros, and variables (allocated to memory) since the source is read from top to bottom. I'll reserve these sections and then add to them as I go.

The first \$4000 bytes of the Game Boy ROM are mapped, appropriately, to the first \$4000 bytes of the Game Boy's memory. If you take a look at [the memory map](https://gbdev.io/pandocs/Memory_Map.html#jump-vectors-in-first-rom-bank), early on you'll find what's called "jump vectors". In short, they're basically what is called by an `rst` instruction, as well as any interrupt, should they be enabled. Because they're placed as the first thing in memory, I have to place these at the start of the ROM as well.

After the jump vectors, there's a bit of unused space up to `\$00FF` that I may use for other purpose as I see fit. Let's call this "high HOME" since it's a small area of the HOME bank before the header. For now, I'll leave this unused by placing nothing in it.  Following *that* is the entry point, cartridge header, the main program, and finally anything else the game might require (such as graphics).

--- src/pong.asm
@{Constants includes}
@{Memory definitions}
@{Jump vectors}

	section "high_home", HOME[$68]
; not used
	
	section "entry", HOME[$100]
@{Entry point}

	section "header", HOME[$134]
@{Header}

	section "program", HOME[$150]
@{Main program}

	section "data", DATA
@{Miscellaneous data}
---

